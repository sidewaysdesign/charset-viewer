{"version":3,"sources":["components/Inspector/inspector.module.css","components/GlyphCard/glyphcard.module.css","components/Paginators/paginators.module.css","components/ModeToggle/modetoggle.module.css","components/GlyphCardControls/glyphcardcontrols.module.css","components/FlashAlerts/flashalerts.module.css","logic/OurReducer.js","components/Paginators/Paginators.js","DispatchContext.js","logic/IsBlankChar.js","logic/CaseHandlers.js","components/GlyphCard/GlyphCard.js","logic/OversizeCharCompensator.js","components/Inspector/Inspector.js","unicode/UnicodeData.js","components/SearchInput/SearchInput.js","components/ModeToggle/ModeToggle.js","components/GlyphCardControls/GlyphCardControls.js","StateContext.js","components/FlashAlerts/FlashAlerts.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ourReducer","draft","action","type","results","query","isSplitSeries","value","defaultedsearch","flashMessages","push","inspectorOpen","inspectoropen","inspectorIndex","index","Paginators","DispatchContext","createContext","isBlankChar","chr","mycanvas","document","createElement","width","height","body","appendChild","ctx","getContext","font","fillText","imgData","getImageData","isBlank","i","data","length","removeChild","regTitleCase","str","replace","txt","charAt","toUpperCase","substr","toLowerCase","hyphenTitleCase","split","map","a","join","GlyphCard","item","useState","copied","copiedEntity","setCopiedEntity","unicodenum","charname","characterString","String","fromCodePoint","parseInt","processedName","appDispatch","useContext","className","styles","unit","onClick","glyph","console","log","openInspectorHandler","bigletter","includes","sideborder","text","info","name","onCopy","setTimeout","OversizeCharCompensator","context","measureText","Math","min","ceil","Inspector","hyphenTitleCaseVal","urlEscape","encodeURIComponent","utf8","trim","closeHandler","copyFlashHandler","msg","escapeListenerCheck","e","key","window","removeEventListener","useEffect","addEventListener","inspector_closebutton","inspector_unit","inspector_column","inspector_bigletter","style","fontSize","inspector_name","inspector_info","data-type","inspector_entity","unicodeData","unicodeNames","unicodeNumbers","SearchInput","onInputChange","fuse","Fuse","minMatchCharLength","limit","threshold","includeScore","newquery","resetCurrentPage","useCallback","onChange","target","q","fuseresults","search","x","refIndex","Array","from","forEach","findIndex","el","codePointAt","toString","padStart","filter","ModeToggle","mode","modeHandler","mobileModeContainer","active","GlyphCardControls","toggle","toggleHandler","container","StateContext","FlashAlerts","props","messages","dangerouslySetInnerHTML","__html","Entities","require","AllHtmlEntities","useStateWithLocalStorage","localStorageKey","defaultValue","localStorage","getItem","setValue","setItem","App","currentPage","setCurrentPage","resultsPerPage","modeToggle","setModeToggle","glyphnameToggle","setGlyphnameToggle","JSON","parse","glyphs","htmlEntities","uiStorage","stringify","useImmerReducer","state","dispatch","hasQuery","Provider","placeholder","undefined","rangeStart","rangeEnd","slice","rangeHandler","htmlFor","readOnly","id","encodeURI","encode","href","xmlns","viewBox","fill","d","transform","Date","getFullYear","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"0GACAA,EAAOC,QAAU,CAAC,eAAiB,kCAAkC,eAAiB,kCAAkC,oBAAsB,uCAAuC,eAAiB,kCAAkC,eAAiB,kCAAkC,iBAAmB,oCAAoC,iBAAmB,oCAAoC,iBAAmB,oCAAoC,sBAAwB,yCAAyC,WAAa,gC,iBCA9gBD,EAAOC,QAAU,CAAC,eAAiB,kCAAkC,KAAO,wBAAwB,UAAY,6BAA6B,KAAO,wBAAwB,KAAO,wBAAwB,OAAS,0BAA0B,OAAS,0BAA0B,WAAa,gC,kBCA9RD,EAAOC,QAAU,CAAC,WAAa,+BAA+B,UAAY,8BAA8B,UAAY,gC,gBCApHD,EAAOC,QAAU,CAAC,eAAiB,mCAAmC,oBAAsB,wCAAwC,OAAS,6B,iBCA7ID,EAAOC,QAAU,CAAC,eAAiB,0CAA0C,UAAY,qCAAqC,OAAS,oC,+ECAvID,EAAOC,QAAU,CAAC,eAAiB,sC,sHC4BpBC,MA7Bf,SAAoBC,EAAOC,GAEzB,OAAQA,EAAOC,MACb,IAAK,oBAGH,OAFAF,EAAMG,QAAUF,EAAOE,aACvBH,EAAMI,MAAQH,EAAOG,OAEvB,IAAK,cAEH,YADAJ,EAAMK,cAAgBJ,EAAOK,OAE/B,IAAK,oBAEH,YADAN,EAAMO,gBAAkBN,EAAOK,OAEjC,IAAK,cAEH,YADAN,EAAMI,MAAQH,EAAOK,OAEvB,IAAK,eAEH,YADAN,EAAMQ,cAAcC,KAAKR,EAAOK,OAElC,IAAK,gBAGH,OAFAN,EAAMU,cAAgBT,EAAOU,mBAC7BX,EAAMY,eAAiBX,EAAOY,OAEhC,IAAK,iBAGH,OAFAb,EAAMU,cAAgBT,EAAOU,mBAC7BX,EAAMY,eAAiB,Q,KCXdE,ICVAC,EAFSC,0B,OCFxB,SAASC,EAAYC,GACnB,IAAIC,EAAWC,SAASC,cAAc,UACtCF,EAASG,MAAQ,EACjBH,EAASI,OAAS,EAClBH,SAASI,KAAKC,YAAYN,GAC1B,IAAIO,EAAMP,EAASQ,WAAW,MAC9BD,EAAIE,KAAO,uEACXF,EAAIG,SAASX,EAAK,EAAG,GAGrB,IAFA,IAAIY,EAAUJ,EAAIK,aAAa,EAAG,EAAG,EAAG,GACpCC,GAAU,EACLC,EAAI,EAAGA,EAAIH,EAAQI,KAAKC,OAAQF,GAAK,EAC5C,GAAIH,EAAQI,KAAKD,EAAI,GAAI,CACvBD,GAAU,EACV,MAIJ,OADAZ,SAASI,KAAKY,YAAYjB,GACnBa,ECjBT,SAASK,EAAaC,GACpB,OAAOA,EAAIC,QAAQ,UAAU,SAAAC,GAAG,OAAIA,EAAIC,OAAO,GAAGC,cAAgBF,EAAIG,OAAO,GAAGC,iBAgBlF,SAASC,EAAgBP,GACvB,OAAOD,EAAaC,GACjBQ,MAAM,KACNC,KAAI,SAAAC,GAAC,OAAIX,EAAaW,MACtBC,KAAK,K,oBCwBKC,MAtCf,YAA6C,IAAxBC,EAAuB,EAAvBA,KAAMxC,EAAiB,EAAjBA,cAAiB,EACFyC,mBAAS,CAAE9C,MAAO,GAAI+C,QAAQ,IAD5B,mBACnCC,EADmC,KACrBC,EADqB,OAEXJ,EAAKL,MAAM,KAFA,mBAEnCU,EAFmC,KAEvBC,EAFuB,KAGpCC,EAAkBC,OAAOC,cAAcC,SAASL,EAAY,KAE5DM,EADqBjB,EAAgBY,GDLhClB,QAAQ,4DAA4D,SAAAC,GAAG,OAAIA,EAAII,iBAAeL,QAAQ,MAAM,SAAAC,GAAG,OAAIA,EAAIE,iBCO5HqB,EAAcC,qBAAWjD,GAa/B,OACE,wBAAIkD,UAAWC,IAAOC,KAAMC,QAAS,kBAPV,SAACC,EAAO1D,GAC9BA,IACH2D,QAAQC,IAAI,WACZR,EAAY,CAAE7D,KAAM,gBAAiBS,eAAe,EAAME,MAAOsC,KAIxBqB,CAAqBrB,EAAMxC,KACpE,kBAAC,kBAAD,CACEsD,UAAS,UAAKC,IAAOO,WAAZ,OAAwBnB,EAAaD,OAAS,UAAY,GAA1D,oBACRI,EAASb,cAAc8B,SAAS,UAAYjB,EAASb,cAAc8B,SAAS,eAAiBzD,EAAYyC,GAA1G,WAAiIQ,IAAOS,YAAe,IACvJC,KAAMlB,GACN,4BACE,8BAAOA,KAGX,yBAAKO,UAAS,UAAKC,IAAOW,OACxB,yBAAKZ,UAAS,UAAKC,IAAOY,MAAZ,OAAmBxB,EAAaD,OAAS,UAAY,IAAMuB,KAAMd,EAAeiB,OAAQ,WAtBrGzB,EAAaD,SAChBE,EAAgB,CAAEF,QAAQ,IAC1B2B,YAAW,kBAAMzB,EAAgB,CAAEF,QAAQ,MAAU,SAqBjD,2BAAIS,O,gBCtCd,SAASmB,EAAwB3C,GAC/B,IAEM4C,EADS9D,SAASC,cAAc,UACfM,WAAW,MAClCuD,EAAQtD,KAHK,gRAIb,IAAMN,EAAQ4D,EAAQC,YAAY7C,GAAKhB,MAEvC,OADsB8D,KAAKC,IAAI,IAAMD,KAAKE,KAAKhE,GAAQ,GCyE1CiE,MAtEf,YAA+B,IAAV1E,EAAS,EAATA,MAAS,EACYuC,mBAAS,CAAE9C,MAAO,GAAI+C,QAAQ,IAD1C,gCAEGxC,EAAMiC,MAAM,MAFf,mBAErBU,EAFqB,KAETC,EAFS,KAGtBC,EAAkBC,OAAOC,cAAcC,SAASL,EAAY,KAC5DgC,EAAqB3C,EAAgBY,GACrCM,EAAcC,qBAAWjD,GACzB0E,EAAYC,mBAAmBhC,GAC/BiC,EAAOF,EAAU3C,MAAM,KAAKG,KAAK,OAAO2C,OACxCC,EAAe,WACnB9B,EAAY,CAAE7D,KAAM,iBAAkBS,eAAe,KAEjDmF,EAAmB,SAAAC,GACvBhC,EAAY,CAAE7D,KAAM,eAAgBI,MAAM,GAAD,OAAKyF,EAAL,cAErCC,EAAsB,SAAtBA,EAAsBC,GACZ,WAAVA,EAAEC,MACJC,OAAOC,oBAAoB,UAAWJ,GACtCH,MAMJ,OAHAQ,qBAAU,WACRF,OAAOG,iBAAiB,UAAWN,KAClC,IAGD,yBAAK/B,UAAU,kBACb,4BAAQA,UAAWC,IAAOqC,sBAAuBnC,QAAS,kBAAMyB,MAC7D,IAEH,yBAAK5B,UAAWC,IAAOsC,gBACrB,yBAAKvC,UAAWC,IAAOuC,kBACrB,kBAAC,kBAAD,CACE1B,OAAQ,kBAAMe,EAAiB,UAC/B7B,UAAS,qBAAgBC,IAAOwC,oBAAvB,oBACZjD,EAASb,cAAc8B,SAAS,UAAYjB,EAASb,cAAc8B,SAAS,eAAiBzD,EAAYyC,GAA1G,WAAiIQ,IAAOS,YAAe,IACnJC,KAAMlB,GACN,4BACE,0BAAMiD,MAAO,CAAEC,SAAS,GAAD,OAAK3B,EAAwBvB,GAA7B,QAAsDA,KAGjF,kBAAC,kBAAD,CAAiBO,UAAS,qBAAgBC,IAAO2C,gBAAkB9B,OAAQ,kBAAMe,EAAiB,eAAelB,KAAMY,GACrH,2BAAIA,KAIR,yBAAKvB,UAAWC,IAAOuC,kBACrB,yBAAKxC,UAAS,UAAKC,IAAO4C,iBACxB,kBAAC,kBAAD,CAAiBC,YAAU,cAAchC,OAAQ,kBAAMe,EAAiB,gBAAgB7B,UAAS,qBAAgBC,IAAO8C,kBAAoBpC,KAAI,YAAOf,SAASL,EAAY,IAA5B,MAC9I,uCAASK,SAASL,EAAY,IAA9B,OAEF,kBAAC,kBAAD,CAAiBuD,YAAU,oBAAoBhC,OAAQ,kBAAMe,EAAiB,oBAAoB7B,UAAS,qBAAgBC,IAAO8C,kBAAoBpC,KAAI,aAAQpB,EAAR,MACxJ,wCAAUA,EAAV,OAEF,kBAAC,kBAAD,CAAiBuD,YAAU,eAAehC,OAAQ,kBAAMe,EAAiB,iBAAiB7B,UAAS,qBAAgBC,IAAO8C,kBAAoBpC,KAAI,YAAOpB,IACvJ,uCAASA,KAEX,kBAAC,kBAAD,CAAiBuD,YAAA,yBAA6BtB,EAAU3C,MAAM,KAAKX,QAAU,EAAI,GAAK,KAAO4C,OAAQ,kBAAMe,EAAiB,oBAAoB7B,UAAS,qBAAgBC,IAAO8C,kBAAoBpC,KAAMa,GACxM,2BAAIA,IAEN,kBAAC,kBAAD,CAAiBsB,YAAA,iBAA6BhC,OAAQ,kBAAMe,EAAiB,mBAAmB7B,UAAS,qBAAgBC,IAAO8C,kBAAoBpC,KAAMe,GACxJ,2BAAIA,SCjELsB,EAAc,+3izDAExB1E,QAAQ,aAAc,IACtBO,MAAM,MACIoE,EAAeD,EAAYlE,KAAI,SAAAC,GAAC,OAAIA,EAAEF,MAAM,KALtC,MAMNqE,EAAiBF,EAAYlE,KAAI,SAAAC,GAAC,OAAIA,EAAEF,MAAM,KAPxC,M,QC0CJsE,MAtCf,YAA+D,IAAxChH,EAAuC,EAAvCA,MAAsBiH,GAAiB,EAAhChH,cAAgC,EAAjBgH,eACrCC,EAAO,IAAIC,IAAKL,EAAc,CAClCM,mBAAoB,EACpBC,MAAO,IACPC,UAAW,IACXC,cAAc,IAEV5D,EAAcC,qBAAWjD,GAC3B6G,EAAWxH,EACTyH,EAAmBC,uBAAY,SAAA7B,GAAC,OAAIoB,EAAc,KAAI,CAACA,IA0B7D,OAAO,2BAAOpD,UAAU,aAAa/D,KAAK,OAAOI,MAAOsH,EAAUG,SAzBlE,SAA2B9B,GACzB,IAAM2B,EAAW3B,EAAE+B,OAAO1H,MAC1B,GAAwB,IAApBsH,EAASzF,OAGX,OAFA4B,EAAY,CAAE7D,KAAM,oBAAqBI,MAAO,GAAIF,MAAOwH,SAC3D7D,EAAY,CAAE7D,KAAM,oBAAqBI,MAAO,SAGlD,IAEuB2H,EAFnB9H,EAAU,GASR+H,EAAcZ,EAAKa,OAAOP,GAAU7E,KAAI,SAAAqF,GAAC,OAAIA,EAAEC,aAErDlI,EAAO,sBAAO+H,GAAP,aATgBD,EASsBL,EARxBU,MAAMC,KAAKN,GACnBO,SAAQ,SAAAnE,GACjBlE,EAAQM,KAAK0G,EAAesB,WAAU,SAAAC,GAAE,OAAIA,IAAOrE,EAAMsE,cAAcC,SAAS,IAAIlG,cAAcmG,SAAS,EAAG,YAEzG1I,MAKGgC,SACV0F,IACA9D,EAAY,CAAE7D,KAAM,oBAAqBC,QAASA,EAAQ2I,QAAO,SAAA7G,GAAC,OAAIA,EAAI,KAAI7B,MAAOwH,S,gBCT5EmB,MAxBf,YAA4C,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,YACpBlF,EAAcC,qBAAWjD,GAI/B,OACE,yBAAKkD,UAAWC,IAAOgF,qBACrB,4BACE,wBAAIjF,UAAoB,WAAT+E,EAAoB9E,IAAOiF,OAAS,GAAI/E,QAAS,kBAAM6E,EAAY,YAAlF,UAGA,wBACEhF,UAAoB,aAAT+E,EAAsB9E,IAAOiF,OAAS,GACjD/E,QAAS,WACP6E,EAAY,YAXpBlF,EAAY,CAAE7D,KAAM,iBAAkBS,eAAe,MAQjD,e,iBCMOyI,MAjBf,YAAuD,IAA1BC,EAAyB,EAAzBA,OAAQC,EAAiB,EAAjBA,cAC7BvF,EAAcC,qBAAWjD,GAI/B,OACE,yBAAKkD,UAAWC,IAAOqF,WACrB,4BAAQtF,UAAS,UAAKC,IAAOmF,OAAZ,YAAiC,cAAXA,IAAqC,IAAXA,EAAkB,SAAW,IAAMjF,QAAS,kBAAMkF,EAAcD,KAAjI,aACY,gCAEZ,4BAAQpF,UAAU,sBAAsBG,QAAS,WAPnDL,EAAY,CAAE7D,KAAM,iBAAkBS,eAAe,MAOnD,qBCVS6I,EAFMxI,0B,MCaNyI,MAVf,SAAqBC,GACnB,OACE,yBAAKzF,UAAU,gBACZyF,EAAMC,SAAS5G,KAAI,SAACgD,EAAKlF,GACxB,OAAO,yBAAK+I,wBAAyB,CAAEC,OAAQ9D,GAAOG,IAAKrF,EAAOoD,UAAU,qB,QCS9E6F,G,MAAWC,EAAQ,IAAiBC,iBAEpCC,EAA2B,SAACC,EAAiBC,GACjD7F,QAAQC,IAAI,yCAA0C2F,EAAiBE,aAAaC,QAAQH,IAD1B,MAExC9G,mBAASgH,aAAaC,QAAQH,IAAoBC,GAFV,mBAE3D7J,EAF2D,KAEpDgK,EAFoD,KAIlE,OADAF,aAAaG,QAAQL,EAAiB5J,GAC/B,CAACA,EAAOgK,IAyFFE,MAvFf,WAAgB,IAAD,EACyBpH,mBAAS,GADlC,mBACNqH,EADM,KACOC,EADP,OAE+BtH,mBAThB,KAOf,mBAENuH,EAFM,aAGuBV,EAAyB,aAAc,aAH9D,mBAGNW,EAHM,KAGMC,EAHN,OAIiCZ,EAAyB,kBAAmB,aAJ7E,mBAINa,EAJM,KAIWC,EAJX,OAkBqB3H,mBAChC4H,KAAKC,MAAMb,aAAaC,QAAQ,eAAiB,CAC/Ca,QAAQ,EACRC,cAAc,IArBL,mBAkBNC,EAlBM,UAyBb/E,qBAAU,WACR+D,aAAaG,QAAQ,YAAaS,KAAKK,UAAUD,MAChD,CAACA,IACJ,IAAqBjI,EA5BR,EAgCamI,YAAgBvL,EA3BpB,CACpBK,MAAO,GACPC,eAAe,EACfF,QAAS,GACTK,cAAe,GACfE,eAAe,EACfE,eAAgB,OAXL,mBAgCN2K,EAhCM,KAgCCC,EAhCD,KAsCPC,EAAWF,EAAMnL,OAASmL,EAAMnL,MAAM+B,OAC5C,OACE,kBAAC,EAAauJ,SAAd,CAAuBpL,MAAOiL,GAC5B,kBAAC,EAAgBG,SAAjB,CAA0BpL,MAAOkL,GAC/B,yBAAKvH,UAAU,OACb,gCACE,0CACA,yBAAKA,UAAU,kBACb,kBAAC,EAAD,CAAa5D,cAAekL,EAAMlL,cAAesL,YAAY,kCAAkCtE,cAAeqD,MAGlH,kBAAC,EAAD,CAAY1B,KAAM4B,EAAY3B,YApClB,SAAAsC,GAAK,OAAIV,EAAcU,MAqCnC,yBAAKtH,UAAS,yBAAmC,aAAf2G,EAA4B,gBAAkB,KAC9E,yBAAK3G,UAAU,sBACb,yBAAKA,UAAS,0BAAqBsH,EAAM7K,cAAgB,iBAAmB,KAC1E,kBAAC,EAAD,CAAkB2I,OAAQyB,EAAiBxB,cAvCnC,SAAAiC,GACpBR,EAA6B,cAAVQ,EAAwB,YAAc,gBAuC7C,yBAAKtH,UAAU,uBACb,yBAAKA,UAAU,kBACb,wBAAIA,UAAS,uBAAkB6G,EAAkB,aAAe,KAAOW,SA1BvEG,KAFGzI,EA4B6FoI,EAAMpL,UA1BzFgD,EAAKhB,QAGpC,SAAsBhC,GACpB,IAAM0L,EAAalB,EAAiBF,EAC9BqB,EAAWD,EAAalB,EAC9B,OAAO,YAAIxK,EAAQ4L,MAAMF,EAAYC,IAoB4FE,CAAaT,EAAMpL,SAAS4C,KAAI,SAACI,EAAMtC,GAAP,OAAiB,kBAAC,EAAD,CAAWsC,KAAM8D,EAAY9D,GAAO+C,IAAKrF,EAAOF,cAAe4K,EAAM7K,mBAAqB,OAE9P,yBAAKuD,UAAU,kBAAkBsH,EAAM7K,eAAiB6K,EAAM3K,eAAiB,kBAAC,EAAD,CAAWC,MAAO0K,EAAM3K,iBAAqB,OAKlI,yBAAKqD,UAAU,mBACb,2BAAOgI,QAAQ,cAAf,+BACA,8BAAUC,UAAQ,EAACC,GAAG,aAAa7L,MAAO8L,UAAUb,EAAMnL,SAC1D,2BAAO6L,QAAQ,cAAf,+BACA,8BAAUC,UAAQ,EAACC,GAAG,aAAa7L,MAAOwJ,EAASuC,OAAOd,EAAMnL,WAGpE,gCACE,uBAAG6D,UAAU,UAAUqI,KAAK,8BAC1B,0BAAMrI,UAAU,YACd,yBAAKsI,MAAM,6BAA6BjL,MAAM,SAASC,OAAO,SAASiL,QAAQ,qBAC7E,0BAAMvI,UAAU,iBAAiBwI,KAAK,UAAUC,EAAE,41BAA41BC,UAAU,8BAG55B,6CAAW,IAAIC,MAAOC,cAAtB,uBAGJ,kBAAC,EAAD,CAAalD,SAAU4B,EAAM/K,oBC9FnBsM,QACW,cAA7B3G,OAAO4G,SAASC,UAEe,UAA7B7G,OAAO4G,SAASC,UAEhB7G,OAAO4G,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFhM,SAASiM,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvJ,QAAQuJ,MAAMA,EAAMC,c","file":"static/js/main.a0021a66.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"icon_clipboard\":\"inspector_icon_clipboard__1avbM\",\"inspector_unit\":\"inspector_inspector_unit__13I7-\",\"inspector_bigletter\":\"inspector_inspector_bigletter__2n5d7\",\"inspector_info\":\"inspector_inspector_info__3jB_Y\",\"inspector_name\":\"inspector_inspector_name__3Gf6M\",\"inspector_entity\":\"inspector_inspector_entity__1CX87\",\"inspector_column\":\"inspector_inspector_column__1C3kY\",\"inspector_copied\":\"inspector_inspector_copied__1hokt\",\"inspector_closebutton\":\"inspector_inspector_closebutton__wqPeU\",\"sideborder\":\"inspector_sideborder__2ffZ-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"icon_clipboard\":\"glyphcard_icon_clipboard__2XO5E\",\"unit\":\"glyphcard_unit__SLC6_\",\"bigletter\":\"glyphcard_bigletter__3toXY\",\"info\":\"glyphcard_info__2KUTZ\",\"name\":\"glyphcard_name__20wzu\",\"entity\":\"glyphcard_entity__3SOHc\",\"copied\":\"glyphcard_copied__3h8RP\",\"sideborder\":\"glyphcard_sideborder__2PTGK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Paginators\":\"paginators_Paginators__2m4Mo\",\"increment\":\"paginators_increment__UZIqQ\",\"decrement\":\"paginators_decrement__JEY1E\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"icon_clipboard\":\"modetoggle_icon_clipboard__3ygSc\",\"mobileModeContainer\":\"modetoggle_mobileModeContainer__16F1n\",\"active\":\"modetoggle_active__3ELdG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"icon_clipboard\":\"glyphcardcontrols_icon_clipboard__2tyDr\",\"container\":\"glyphcardcontrols_container__1-lZo\",\"toggle\":\"glyphcardcontrols_toggle__14o-j\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"icon_clipboard\":\"flashalerts_icon_clipboard__fr07C\"};","function ourReducer(draft, action) {\n  // eslint-disable-next-line default-case\n  switch (action.type) {\n    case 'showsearchresults':\n      draft.results = action.results\n      draft.query = action.query\n      return\n    case 'splitseries':\n      draft.isSplitSeries = action.value\n      return\n    case 'defaultmodeupdate':\n      draft.defaultedsearch = action.value\n      return\n    case 'queryupdate':\n      draft.query = action.value\n      return\n    case 'flashMessage':\n      draft.flashMessages.push(action.value)\n      return\n    case 'openinspector':\n      draft.inspectorOpen = action.inspectoropen\n      draft.inspectorIndex = action.index\n      return\n    case 'closeinspector':\n      draft.inspectorOpen = action.inspectoropen\n      draft.inspectorIndex = null\n      return\n  }\n}\nexport default ourReducer\n","import React from 'react'\nimport styles from './paginators.module.css'\n\nfunction Paginators({ increment, decrement, currentPage, numPages }) {\n  return (\n    <div className={styles.Paginators}>\n      <button className={styles.increment} disabled={currentPage ? null : true} onClick={() => decrement()}></button>\n      <p>\n        <span>{currentPage + 1}</span> of <span>{numPages + 1}</span>\n      </p>\n      <button disabled={currentPage < numPages ? null : true} className={styles.decrement} onClick={() => increment()}></button>\n    </div>\n  )\n}\nexport default Paginators\n","import { createContext } from 'react'\n\nconst DispatchContext = createContext()\n\nexport default DispatchContext\n","function isBlankChar(chr) {\n  var mycanvas = document.createElement('canvas')\n  mycanvas.width = 8\n  mycanvas.height = 8\n  document.body.appendChild(mycanvas)\n  var ctx = mycanvas.getContext('2d')\n  ctx.font = \"4px monospace, 'segoe ui symbol', 'segoe ui symbol', source-code-pro\"\n  ctx.fillText(chr, 0, 6)\n  let imgData = ctx.getImageData(0, 0, 8, 8)\n  let isBlank = true\n  for (let i = 0; i < imgData.data.length; i += 4) {\n    if (imgData.data[i + 3]) {\n      isBlank = false\n      break\n    }\n  }\n  document.body.removeChild(mycanvas)\n  return isBlank\n}\nexport { isBlankChar }\n","function regTitleCase(str) {\n  return str.replace(/\\w\\S*/g, txt => txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase())\n}\nfunction lowercaseConjunctions(str) {\n  // return str\n  // if (iOS()) return str\n  return str.replace(/\\b(This|To|Left|That|And|With|For|But|Or|So|Yet|Nor)\\b/gi, txt => txt.toLowerCase()).replace(/^./, txt => txt.toUpperCase())\n  // const lowerCaseRegex = new RegExp('/(?<!^)\\bThis|The|To|That|And|With|For|But|Or|So|Yet|Nor\\b/g')\n  // prettier-ignore\n  // return str.replace(lowerCaseRegex, txt => txt.toLowerCase())\n  // function iOS() {\n  //   return (\n  //     ['iPad Simulator', 'iPhone Simulator', 'iPod Simulator', 'iPad', 'iPhone', 'iPod'].includes(navigator.platform) ||\n  //     (navigator.userAgent.includes('Mac') && 'ontouchend' in document)\n  //   )\n  // }\n}\nfunction hyphenTitleCase(str) {\n  return regTitleCase(str)\n    .split('-')\n    .map(a => regTitleCase(a))\n    .join('-')\n}\nexport { regTitleCase, hyphenTitleCase, lowercaseConjunctions }\n","import React, { useState, useContext } from 'react'\nimport DispatchContext from '../../DispatchContext'\nimport { CopyToClipboard } from 'react-copy-to-clipboard'\nimport { isBlankChar } from '../../logic/IsBlankChar'\nimport { hyphenTitleCase, lowercaseConjunctions } from '../../logic/CaseHandlers'\nimport styles from './glyphcard.module.css'\n\nfunction GlyphCard({ item, inspectoropen }) {\n  const [copiedEntity, setCopiedEntity] = useState({ value: '', copied: false })\n  const [unicodenum, charname] = item.split(';')\n  const characterString = String.fromCodePoint(parseInt(unicodenum, 16))\n  const hyphenTitleCaseVal = hyphenTitleCase(charname)\n  const processedName = lowercaseConjunctions(hyphenTitleCaseVal)\n  const appDispatch = useContext(DispatchContext)\n  const copyClipHandler = () => {\n    if (!copiedEntity.copied) {\n      setCopiedEntity({ copied: true })\n      setTimeout(() => setCopiedEntity({ copied: false }), 1250)\n    }\n  }\n  const openInspectorHandler = (glyph, inspectoropen) => {\n    if (!inspectoropen) {\n      console.log('opening')\n      appDispatch({ type: 'openinspector', inspectoropen: true, index: item })\n    }\n  }\n  return (\n    <li className={styles.unit} onClick={() => openInspectorHandler(item, inspectoropen)}>\n      <CopyToClipboard\n        className={`${styles.bigletter}${copiedEntity.copied ? ' copied' : ''}\n      ${(charname.toLowerCase().includes('space') || charname.toLowerCase().includes('invisible')) && isBlankChar(characterString) ? ` ${styles.sideborder}` : ''}`}\n        text={characterString}>\n        <h3>\n          <span>{characterString}</span>\n        </h3>\n      </CopyToClipboard>\n      <div className={`${styles.info}`}>\n        <div className={`${styles.name}${copiedEntity.copied ? ' copied' : ''}`} text={processedName} onCopy={() => copyClipHandler()}>\n          <p>{processedName}</p>\n        </div>\n        {/* {copiedEntity.copied ? <div className={`${styles.copied} copiedactive`}>Copied</div> : null} */}\n      </div>\n    </li>\n  )\n}\nexport default GlyphCard\n","function OversizeCharCompensator(str) {\n  const font = \"100px 'Inter Bold', 'apple color emoji', 'segoe ui emoji', 'noto color emoji', notocoloremoji, 'segoe ui symbol', 'android emoji', emojisymbols, 'emojione mozilla', 'twemoji mozilla', 'segoe ui symbol', source-code-pro, Menlo, Monaco, Consolas, 'Courier New', monospace\"\n  const canvas = document.createElement('canvas')\n  const context = canvas.getContext('2d')\n  context.font = font\n  const width = context.measureText(str).width\n  const oversizeRatio = Math.min(100 / Math.ceil(width), 1)\n  return oversizeRatio\n}\nexport { OversizeCharCompensator }\n","import React, { useContext, useState, useEffect } from 'react'\nimport DispatchContext from '../../DispatchContext'\nimport { CopyToClipboard } from 'react-copy-to-clipboard'\nimport styles from './inspector.module.css'\nimport { isBlankChar } from '../../logic/IsBlankChar'\nimport { OversizeCharCompensator } from '../../logic/OversizeCharCompensator'\nimport { hyphenTitleCase } from '../../logic/CaseHandlers'\n\nconst copyClipHandler = () => {}\nfunction Inspector({ index }) {\n  const [copiedEntity, setCopiedEntity] = useState({ value: '', copied: false })\n  const [unicodenum, charname] = index.split(';')\n  const characterString = String.fromCodePoint(parseInt(unicodenum, 16))\n  const hyphenTitleCaseVal = hyphenTitleCase(charname)\n  const appDispatch = useContext(DispatchContext)\n  const urlEscape = encodeURIComponent(characterString)\n  const utf8 = urlEscape.split('%').join(' 0x').trim()\n  const closeHandler = () => {\n    appDispatch({ type: 'closeinspector', inspectoropen: false })\n  }\n  const copyFlashHandler = msg => {\n    appDispatch({ type: 'flashMessage', value: `${msg} copied` })\n  }\n  const escapeListenerCheck = e => {\n    if (e.key === 'Escape') {\n      window.removeEventListener('keydown', escapeListenerCheck)\n      closeHandler()\n    }\n  }\n  useEffect(() => {\n    window.addEventListener('keydown', escapeListenerCheck)\n  }, [])\n  return (\n    // <div className=\"glyphInspector\" onKeyDown={e => escapeKeyHandler(e)} tabIndex=\"0\">\n    <div className=\"glyphInspector\">\n      <button className={styles.inspector_closebutton} onClick={() => closeHandler()}>\n        {''}\n      </button>\n      <div className={styles.inspector_unit}>\n        <div className={styles.inspector_column}>\n          <CopyToClipboard\n            onCopy={() => copyFlashHandler('Glyph')}\n            className={`copybutton ${styles.inspector_bigletter}\n      ${(charname.toLowerCase().includes('space') || charname.toLowerCase().includes('invisible')) && isBlankChar(characterString) ? ` ${styles.sideborder}` : ''}`}\n            text={characterString}>\n            <h3>\n              <span style={{ fontSize: `${OversizeCharCompensator(characterString)}em` }}>{characterString}</span>\n            </h3>\n          </CopyToClipboard>\n          <CopyToClipboard className={`copybutton ${styles.inspector_name}`} onCopy={() => copyFlashHandler('Glyph name')} text={hyphenTitleCaseVal}>\n            <p>{hyphenTitleCaseVal}</p>\n          </CopyToClipboard>\n        </div>\n\n        <div className={styles.inspector_column}>\n          <div className={`${styles.inspector_info}`}>\n            <CopyToClipboard data-type=\"HTML Entity\" onCopy={() => copyFlashHandler('HTML entity')} className={`copybutton ${styles.inspector_entity}`} text={`&#${parseInt(unicodenum, 16)};`}>\n              <p>{`&#${parseInt(unicodenum, 16)};`}</p>\n            </CopyToClipboard>\n            <CopyToClipboard data-type=\"HTML Entity (Hex)\" onCopy={() => copyFlashHandler('HTML hex entity')} className={`copybutton ${styles.inspector_entity}`} text={`&#x${unicodenum};`}>\n              <p>{`&#x${unicodenum};`}</p>\n            </CopyToClipboard>\n            <CopyToClipboard data-type=\"CSS Encoding\" onCopy={() => copyFlashHandler('CSS encoding')} className={`copybutton ${styles.inspector_entity}`} text={`\\\\${unicodenum}`}>\n              <p>{`\\\\${unicodenum}`}</p>\n            </CopyToClipboard>\n            <CopyToClipboard data-type={`URL Escape Code${urlEscape.split('%').length <= 2 ? '' : 's'}`} onCopy={() => copyFlashHandler('URL escape code')} className={`copybutton ${styles.inspector_entity}`} text={urlEscape}>\n              <p>{urlEscape}</p>\n            </CopyToClipboard>\n            <CopyToClipboard data-type={`UTF-8 Encoding`} onCopy={() => copyFlashHandler('UTF-8 encoding')} className={`copybutton ${styles.inspector_entity}`} text={utf8}>\n              <p>{utf8}</p>\n            </CopyToClipboard>\n            {/* {copiedEntity.copied ? <div className={`copybutton ${styles.inspector_copied} copiedactive`}>Copied</div> : null} */}\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Inspector\n","import raw from 'raw.macro'\n\nconst uniCodePos = 0\nconst uniNamePos = 1\nexport const unicodeData = raw('./UnicodeData.txt')\n  // export const unicodeData = raw('./UnicodeDataSmall.txt')\n  .replace(/^\\s+|\\s+$/g, '')\n  .split('\\n')\nexport const unicodeNames = unicodeData.map(a => a.split(';')[uniNamePos])\nexport const unicodeNumbers = unicodeData.map(a => a.split(';')[uniCodePos])\n","import React, { useContext, useCallback } from 'react'\nimport DispatchContext from '../../DispatchContext'\nimport { unicodeNames, unicodeNumbers } from '../../unicode/UnicodeData'\n// import Pluralize from 'pluralize'\nimport Fuse from 'fuse.js'\n\nfunction SearchInput({ query, isSplitSeries, onInputChange }) {\n  const fuse = new Fuse(unicodeNames, {\n    minMatchCharLength: 3,\n    limit: 500,\n    threshold: 0.18,\n    includeScore: true\n  })\n  const appDispatch = useContext(DispatchContext)\n  let newquery = query\n  const resetCurrentPage = useCallback(e => onInputChange(0), [onInputChange])\n  function handleFieldChange(e) {\n    const newquery = e.target.value\n    if (newquery.length === 0) {\n      appDispatch({ type: 'showsearchresults', value: [], query: newquery })\n      appDispatch({ type: 'defaultmodeupdate', value: 'auto' })\n      return\n    }\n    let results = []\n\n    const codePointMatch = q => {\n      const utf8String = Array.from(q)\n      utf8String.forEach(glyph => {\n        results.push(unicodeNumbers.findIndex(el => el === glyph.codePointAt().toString(16).toUpperCase().padStart(4, '0')))\n      })\n      return results\n    }\n    const fuseresults = fuse.search(newquery).map(x => x.refIndex)\n\n    results = [...fuseresults, ...codePointMatch(newquery)]\n    if (results.length) {\n      resetCurrentPage()\n      appDispatch({ type: 'showsearchresults', results: results.filter(i => i > 0), query: newquery })\n    }\n    return\n  }\n  return <input className=\"main_input\" type=\"text\" value={newquery} onChange={handleFieldChange} />\n}\n\nexport default SearchInput\n","import React, { useContext } from 'react'\nimport styles from './modetoggle.module.css'\nimport DispatchContext from '../../DispatchContext'\n\nfunction ModeToggle({ mode, modeHandler }) {\n  const appDispatch = useContext(DispatchContext)\n  const closeInspectorHandler = () => {\n    appDispatch({ type: 'closeinspector', inspectoropen: false })\n  }\n  return (\n    <div className={styles.mobileModeContainer}>\n      <ul>\n        <li className={mode === 'glyphs' ? styles.active : ''} onClick={() => modeHandler('glyphs')}>\n          Glyphs\n        </li>\n        <li\n          className={mode === 'entities' ? styles.active : ''}\n          onClick={() => {\n            modeHandler('entities')\n            closeInspectorHandler()\n          }}>\n          Entities\n        </li>\n      </ul>\n    </div>\n  )\n}\n\nexport default ModeToggle\n","import React, { useContext } from 'react'\nimport DispatchContext from '../../DispatchContext'\nimport styles from './glyphcardcontrols.module.css'\n\nfunction GlyphCardControls({ toggle, toggleHandler }) {\n  const appDispatch = useContext(DispatchContext)\n  const closeHandler = () => {\n    appDispatch({ type: 'closeinspector', inspectoropen: false })\n  }\n  return (\n    <div className={styles.container}>\n      <button className={`${styles.toggle} ${toggle === 'shownames' || toggle === true ? 'active' : ''}`} onClick={() => toggleHandler(toggle)}>\n        Show names<span></span>\n      </button>\n      <button className=\"inspectorBackButton\" onClick={() => closeHandler()}>\n        Back to results\n      </button>\n    </div>\n  )\n}\n\nexport default GlyphCardControls\n","import { createContext } from 'react'\n\nconst StateContext = createContext()\n\nexport default StateContext\n","// ;<FlashAlerts messages={state.flashMessages} dangerNotice={state.dangerNotice} />\n\nimport React from 'react'\nimport styles from './flashalerts.module.css'\n\nfunction FlashAlerts(props) {\n  return (\n    <div className=\"flash-alerts\">\n      {props.messages.map((msg, index) => {\n        return <div dangerouslySetInnerHTML={{ __html: msg }} key={index} className=\"flash-alert\" />\n      })}\n    </div>\n  )\n}\n\nexport default FlashAlerts\n","import React, { useState, useEffect, useContext } from 'react'\nimport ourReducer from './logic/OurReducer'\nimport Paginators from './components/Paginators/Paginators'\nimport GlyphCard from './components/GlyphCard/GlyphCard'\nimport Inspector from './components/Inspector/Inspector'\nimport SearchInput from './components/SearchInput/SearchInput'\nimport ModeToggle from './components/ModeToggle/ModeToggle'\nimport GlyphNamesToggle from './components/GlyphCardControls/GlyphCardControls'\nimport { unicodeData } from './unicode/UnicodeData'\nimport StateContext from './StateContext'\nimport DispatchContext from './DispatchContext'\nimport FlashAlerts from './components/FlashAlerts/FlashAlerts'\n\n// import { useParams } from 'react-router'\n\nimport { useImmerReducer } from 'use-immer'\nimport './App.css'\n\nconst Entities = require('html-entities').AllHtmlEntities\nconst initialResultsPerPage = 200\nconst useStateWithLocalStorage = (localStorageKey, defaultValue) => {\n  console.log('localStorage.getItem(localStorageKey) ', localStorageKey, localStorage.getItem(localStorageKey))\n  const [value, setValue] = useState(localStorage.getItem(localStorageKey) || defaultValue)\n  localStorage.setItem(localStorageKey, value)\n  return [value, setValue]\n}\nfunction App() {\n  const [currentPage, setCurrentPage] = useState(0)\n  const [resultsPerPage, setResultsPerPage] = useState(initialResultsPerPage)\n  const [modeToggle, setModeToggle] = useStateWithLocalStorage('modeToggle', 'entities')\n  const [glyphnameToggle, setGlyphnameToggle] = useStateWithLocalStorage('glyphnameToggle', 'shownames')\n  const originalState = {\n    query: '',\n    isSplitSeries: true,\n    results: [],\n    flashMessages: [],\n    inspectorOpen: false,\n    inspectorIndex: null\n  }\n  const modeHandler = state => setModeToggle(state)\n  const toggleHandler = state => {\n    setGlyphnameToggle(state === 'shownames' ? 'hidenames' : 'shownames')\n  }\n\n  const [uiStorage, setUiStorage] = useState(\n    JSON.parse(localStorage.getItem('uiStorage')) || {\n      glyphs: true,\n      htmlEntities: false\n    }\n  )\n\n  useEffect(() => {\n    localStorage.setItem('uiStorage', JSON.stringify(uiStorage))\n  }, [uiStorage])\n  const validResults = item => {\n    // return false\n    return item !== undefined && item.length\n  }\n  const [state, dispatch] = useImmerReducer(ourReducer, originalState)\n  function rangeHandler(results) {\n    const rangeStart = resultsPerPage * currentPage\n    const rangeEnd = rangeStart + resultsPerPage\n    return [...results.slice(rangeStart, rangeEnd)]\n  }\n  const hasQuery = state.query && state.query.length\n  return (\n    <StateContext.Provider value={state}>\n      <DispatchContext.Provider value={dispatch}>\n        <div className=\"App\">\n          <header>\n            <h1>GlyphWorks</h1>\n            <div className=\"inputContainer\">\n              <SearchInput isSplitSeries={state.isSplitSeries} placeholder=\"Input chracters or search names\" onInputChange={setCurrentPage} />\n            </div>\n          </header>\n          <ModeToggle mode={modeToggle} modeHandler={modeHandler} />\n          <div className={`outputContainer${modeToggle === 'entities' ? ' showentities' : ''}`}>\n            <div className=\"glyphcardContainer\">\n              <div className={`glyphcardWrapper${state.inspectorOpen ? ' inspectoropen' : ''}`}>\n                <GlyphNamesToggle toggle={glyphnameToggle} toggleHandler={toggleHandler} />\n                <div className=\"glyphPanelContainer\">\n                  <div className=\"glyphPanelUnit\">\n                    <ul className={`glyphcardList${glyphnameToggle ? ' shownames' : ''}`}>{hasQuery && validResults(state.results) ? rangeHandler(state.results).map((item, index) => <GlyphCard item={unicodeData[item]} key={index} inspectoropen={state.inspectorOpen} />) : null}</ul>\n                  </div>\n                  <div className=\"glyphPanelUnit\">{state.inspectorOpen && state.inspectorIndex ? <Inspector index={state.inspectorIndex} /> : ''}</div>\n                </div>\n              </div>\n            </div>\n            {/* {hasQuery && state.results.length > resultsPerPage ? <Paginators currentPage={currentPage} decrement={() => setCurrentPage(Math.max(0, currentPage - 1))} increment={() => setCurrentPage(Math.floor(Math.min(state.results.length / resultsPerPage, currentPage + 1)))} numPages={Math.floor((state.results.length - 1) / resultsPerPage)} /> : false} */}\n            <div className=\"entityContainer\">\n              <label htmlFor=\"entity-url\">URL addresses/mailto: links</label>\n              <textarea readOnly id=\"entity-url\" value={encodeURI(state.query)}></textarea>\n              <label htmlFor=\"entity-all\">URL addresses/mailto: links</label>\n              <textarea readOnly id=\"entity-all\" value={Entities.encode(state.query)}></textarea>\n            </div>\n          </div>\n          <footer>\n            <a className=\"swdLink\" href=\"https://sidewaysdesign.com\">\n              <span className=\"infinity\">\n                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"52.158\" height=\"18.402\" viewBox=\"0 0 52.158 18.402\">\n                  <path className=\"infinity__mark\" fill=\"#d84a0e\" d=\"M51.679,6.41C50.546,2.677,47.39.517,43.14.282a22.465,22.465,0,0,0-14.713,4.19,62.958,62.958,0,0,0-4.912,4.851A16.187,16.187,0,0,1,13.272,13.5c-2.661.144-6.866-.205-7.262-3.581A4.84,4.84,0,0,1,7.41,5.8C9.942,3.65,15.075,4.137,18.063,4.92c.152.038.89.243,1.376.388a.557.557,0,0,0,.6-.205l.327-.433a.551.551,0,0,0-.023-.7,8.345,8.345,0,0,0-1.65-1.506C14.352-.441,5.38-1.444,1.745,3.566-1.175,7.6-.939,14.615,3.874,17.147a10.588,10.588,0,0,0,4.768,1.285,22.028,22.028,0,0,0,13.223-3.939,24.29,24.29,0,0,0,3.6-3,26.124,26.124,0,0,1,4.768-4.327A15.1,15.1,0,0,1,41.566,5.14c.829.221,2.829,1.163,3.277,2.973.487,1.939-1.08,4.076-2.722,4.988a8.738,8.738,0,0,1-4.912.7c-1.65-.091-3.262-.5-4.889-.753a1.05,1.05,0,0,0-.16,0,.431.431,0,0,0-.281.19c-.342.532-.738,1.027-.038,1.521a18.4,18.4,0,0,0,6.783,2.981c3.581.768,7.55.494,10.349-2.015A9.591,9.591,0,0,0,51.679,6.41Z\" transform=\"translate(0.159 -0.047)\" />\n                </svg>\n              </span>\n              <span>{`©${new Date().getFullYear()} Sideways Design`}</span>\n            </a>\n          </footer>\n          <FlashAlerts messages={state.flashMessages} />\n        </div>\n      </DispatchContext.Provider>\n    </StateContext.Provider>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
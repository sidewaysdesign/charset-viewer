{"version":3,"sources":["components/GlyphCard/glyphcard.module.css","components/Paginators/Paginators.js","components/GlyphCard/GlyphCard.js","DispatchContext.js","unicode/UnicodeData.js","components/SearchInput/SearchInput.js","components/SearchMode/SearchMode.js","StateContext.js","App.js","serviceWorker.js","index.js","components/Paginators/paginators.module.css","components/SearchMode/searchmode.module.css"],"names":["module","exports","Paginators","increment","decrement","currentPage","numPages","className","styles","disabled","onClick","GlyphCard","item","useState","value","copied","copiedEntity","setCopiedEntity","split","unicodenum","charname","characterString","String","fromCodePoint","parseInt","hyphenTitleCaseVal","regTitleCase","map","a","join","str","replace","txt","charAt","toUpperCase","substr","toLowerCase","copyClipHandler","setTimeout","console","log","glyphcard_unit","glyphcard_bigletter","includes","chr","mycanvas","document","createElement","width","height","body","appendChild","ctx","getContext","font","fillText","imgData","getImageData","isBlank","i","data","length","removeChild","isBlankChar","sideborder","text","onCopy","glyphcard_info","glyphcard_name","glyphcard_entity","glyphcard_copied","DispatchContext","createContext","unicodeData","unicodeNames","unicodeNumbers","SearchInput","query","onInputChange","isSplitSeries","appDispatch","useContext","newquery","resetCurrentPage","useCallback","e","type","onChange","target","q","results","localResults","Set","Pluralize","singular","plural","forEach","w","firstWordRegex","RegExp","el","index","test","push","cleanedLocal","filter","num","firstWholeWord","Array","from","glyph","findIndex","codePointAt","toString","padStart","SearchMode","splitseries","isEnabled","SearchMode_Container","SearchMode_Checkbox","id","checked","htmlFor","StateContext","Entities","require","AllHtmlEntities","useStateWithLocalStorage","localStorageKey","localStorage","getItem","setValue","useEffect","setItem","JSON","parse","App","setCurrentPage","resultsPerPage","glyphs","htmlEntities","uiStorage","setUiStorage","stringify","useImmerReducer","draft","action","defaultedsearch","state","dispatch","hasQuery","Provider","aria-expanded","aria-controls","duration","rangeStart","rangeEnd","slice","rangeHandler","key","Math","max","floor","min","for","encodeURI","encode","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.9c433648.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"icon_clipboard\":\"glyphcard_icon_clipboard__2XO5E\",\"glyphcard_unit\":\"glyphcard_glyphcard_unit__277nz\",\"glyphcard_bigletter\":\"glyphcard_glyphcard_bigletter__3EVrP\",\"glyphcard_info\":\"glyphcard_glyphcard_info__3tIPI\",\"glyphcard_name\":\"glyphcard_glyphcard_name__6arB5\",\"glyphcard_entity\":\"glyphcard_glyphcard_entity__1AL9X\",\"glyphcard_copied\":\"glyphcard_glyphcard_copied__2QIRC\",\"sideborder\":\"glyphcard_sideborder__2PTGK\"};","import React from 'react'\nimport styles from './paginators.module.css'\n\nfunction Paginators({ increment, decrement, currentPage, numPages }) {\n  return (\n    <div className={styles.Paginators}>\n      <button className={styles.increment} disabled={currentPage ? null : true} onClick={() => decrement()}></button>\n      <p>\n        <span>{currentPage + 1}</span> of <span>{numPages + 1}</span>\n      </p>\n      <button disabled={currentPage < numPages ? null : true} className={styles.decrement} onClick={() => increment()}></button>\n    </div>\n  )\n}\nexport default Paginators\n","import React, { useState } from 'react'\nimport { CopyToClipboard } from 'react-copy-to-clipboard'\n\nimport styles from './glyphcard.module.css'\n\nfunction GlyphCard({ item }) {\n  const [copiedEntity, setCopiedEntity] = useState({ value: '', copied: false })\n  const [unicodenum, charname] = item.split(';')\n  const characterString = String.fromCodePoint(parseInt(unicodenum, 16))\n  const hyphenTitleCaseVal = hyphenTitleCase(charname)\n  function regTitleCase(str) {\n    return str.replace(/\\w\\S*/g, txt => txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase())\n  }\n  function hyphenTitleCase(str) {\n    return regTitleCase(str)\n      .split('-')\n      .map(a => regTitleCase(a))\n      .join('-')\n  }\n\n  function isBlankChar(chr) {\n    var mycanvas = document.createElement('canvas')\n    mycanvas.width = 8\n    mycanvas.height = 8\n    document.body.appendChild(mycanvas)\n    var ctx = mycanvas.getContext('2d')\n    ctx.font = \"4px monospace, 'segoe ui symbol', 'segoe ui symbol', source-code-pro\"\n    ctx.fillText(chr, 0, 6)\n    let imgData = ctx.getImageData(0, 0, 8, 8)\n    let isBlank = true\n    for (let i = 0; i < imgData.data.length; i += 4) {\n      if (imgData.data[i + 3]) {\n        isBlank = false\n        break\n      }\n    }\n    document.body.removeChild(mycanvas)\n    return isBlank\n  }\n\n  const copyClipHandler = () => {\n    if (!copiedEntity.copied) {\n      setCopiedEntity({ copied: true })\n      setTimeout(() => setCopiedEntity({ copied: false }), 1250)\n    }\n  }\n  console.log(characterString == '')\n  return (\n    <div className={styles.glyphcard_unit}>\n      <CopyToClipboard className={`${styles.glyphcard_bigletter}${copiedEntity.copied ? ' copied' : ''}${charname.toLowerCase().includes('space') || (charname.toLowerCase().includes('invisible') && isBlankChar(characterString)) ? ` ${styles.sideborder}` : ''}`} text={characterString} onCopy={() => copyClipHandler()}>\n        <h3>\n          <span>{characterString}</span>\n        </h3>\n      </CopyToClipboard>\n      <div className={`${styles.glyphcard_info}`}>\n        <CopyToClipboard className={`${styles.glyphcard_name}${copiedEntity.copied ? ' copied' : ''}`} text={hyphenTitleCaseVal} onCopy={() => copyClipHandler()}>\n          <p>{hyphenTitleCaseVal}</p>\n        </CopyToClipboard>\n        <CopyToClipboard className={`${styles.glyphcard_entity}${copiedEntity.copied ? ' copied' : ''}`} text={`&${unicodenum};`} onCopy={() => copyClipHandler()}>\n          <p>{`&#x${unicodenum};`}</p>\n        </CopyToClipboard>\n        {copiedEntity.copied ? <div className={`${styles.glyphcard_copied} copiedactive`}>Copied</div> : null}\n      </div>\n    </div>\n  )\n}\nexport default GlyphCard\n","import { createContext } from 'react'\n\nconst DispatchContext = createContext()\n\nexport default DispatchContext\n","import raw from 'raw.macro'\n\nconst uniCodePos = 0\nconst uniNamePos = 1\nexport const unicodeData = raw('./UnicodeData.txt')\n  .replace(/^\\s+|\\s+$/g, '')\n  .split('\\n')\nexport const unicodeNames = unicodeData.map(a => a.split(';')[uniNamePos])\nexport const unicodeNumbers = unicodeData.map(a => a.split(';')[uniCodePos])\n","import React, { useContext, useCallback } from 'react'\nimport DispatchContext from '../../DispatchContext'\nimport { unicodeNames, unicodeNumbers } from '../../unicode/UnicodeData'\nimport Pluralize from 'pluralize'\n\nfunction SearchInput({ query, isSplitSeries, onInputChange }) {\n  const appDispatch = useContext(DispatchContext)\n  let newquery = query\n  const resetCurrentPage = useCallback(e => onInputChange(0), [onInputChange])\n  function handleFieldChange(e) {\n    const newquery = e.target.value\n    if (newquery.length === 0) {\n      appDispatch({ type: 'showsearchresults', value: [], query: newquery })\n      appDispatch({ type: 'defaultmodeupdate', value: 'auto' })\n      return\n    }\n    // const emo_test = q => /^(?:[\\u2700-\\u27bf]|(?:\\ud83c[\\udde6-\\uddff]){2}|[\\ud800-\\udbff][\\udc00-\\udfff]|[\\u0023-\\u0039]\\ufe0f?\\u20e3|\\u3299|\\u3297|\\u303d|\\u3030|\\u24c2|\\ud83c[\\udd70-\\udd71]|\\ud83c[\\udd7e-\\udd7f]|\\ud83c\\udd8e|\\ud83c[\\udd91-\\udd9a]|\\ud83c[\\udde6-\\uddff]|[\\ud83c[\\ude01-\\ude02]|\\ud83c\\ude1a|\\ud83c\\ude2f|[\\ud83c[\\ude32-\\ude3a]|[\\ud83c[\\ude50-\\ude51]|\\u203c|\\u2049|[\\u25aa-\\u25ab]|\\u25b6|\\u25c0|[\\u25fb-\\u25fe]|\\u00a 9|\\u00ae|\\u2122|\\u2139|\\ud83c\\udc04|[\\u2600-\\u26FF]|\\u2b05|\\u2b06|\\u2b07|\\u2b1b|\\u2b1c|\\u2b50|\\u2b55|\\u231a|\\u231b|\\u2328|\\u23cf|[\\u23e9-\\u23f3]|[\\u23f8-\\u23fa]|\\ud83c\\udccf|\\u2934|\\u2935|[\\u2190-\\u21ff])/.test(q)\n    let results = []\n\n    const alphaTest = q => /^[\\w -]+$/.test(q)\n    // const wordTest = q => /^\\b[\\w -]+$/.test(q)\n    // const firstWholeWordTest = q => /[\\w -]+?\\b[\\w -]+?$/.test(q)\n    const firstWholeWord = q => {\n      const localResults = []\n      const variations = [...new Set([Pluralize.singular(q), Pluralize.plural(q)])]\n      variations.forEach(w => {\n        const firstWordRegex = new RegExp(`\\\\b${w}\\\\b`)\n        console.log('firstWordRegex ->', firstWordRegex)\n        unicodeNames.forEach((el, index) => {\n          if (firstWordRegex.test(el)) localResults.push(index) // checks for exact match with whole first word; assumes user is still typing second word\n        })\n      })\n      const cleanedLocal = [...new Set(localResults.filter(num => num === parseInt(num)))]\n\n      console.log('firstWholeWord RESULTS', cleanedLocal)\n      return cleanedLocal\n    }\n    const rawMatch = q => {\n      console.log('rawMatch')\n      return unicodeNames.map((el, index) => (el.includes(newquery.toUpperCase()) ? index : false)).filter(el => el)\n    }\n\n    const codePointMatch = q => {\n      const utf8String = Array.from(q)\n      // console.log('utf8String IN <--', utf8String)\n      utf8String.map(glyph => {\n        results.push(unicodeNumbers.findIndex(el => el === glyph.codePointAt().toString(16).toUpperCase().padStart(4, '0')))\n      })\n      // console.log('utf8String OUT -->', utf8String)\n      return results\n    }\n    // if (alphaTest(newquery) && newquery.length > 1) {\n    /* SEARCH BY DESCRIPTIVE NAME */\n    // if (firstWholeWordTest(newquery)) {\n    results = [...firstWholeWord(newquery.toUpperCase())]\n    /* assumes user is looking for specific phrase and has started typing second word */\n    // } // results = rawMatch(newquery)\n    // results = codePointMatch(newquery)\n    results = [...codePointMatch(newquery)]\n\n    // if (results.length && isSplitSeries) {\n    // results = [...new Set(results)]\n    // }\n    // }\n    // if (isSplitSeries === 'glyph' || 1 == 1) {\n    //   // if (isSplitSeries === 'glyph' || 1 == 1) {\n    //   results = codePointMatch(newquery)\n    // }\n    console.log('results', results)\n    if (results.length) {\n      resetCurrentPage()\n      appDispatch({ type: 'showsearchresults', results: results, query: newquery })\n    }\n    return\n  }\n  return <input className=\"main_input\" type=\"text\" value={newquery} onChange={handleFieldChange} />\n}\n\nexport default SearchInput\n","import React, { useContext, Checkbox } from 'react'\nimport DispatchContext from '../../DispatchContext'\n\nimport styles from './searchmode.module.css'\n\nfunction SearchMode({ splitseries, query }) {\n  const appDispatch = useContext(DispatchContext)\n  const isEnabled = query && query.length\n  return (\n    <div className={styles.SearchMode_Container}>\n      {/* {JSON.stringify({ query: query })} */}\n      <div className={styles.SearchMode_Checkbox}>\n        <input type=\"checkbox\" id=\"splitseries\" disabled={!isEnabled} checked={splitseries} className={styles.SearchMode_Checkbox} onChange={e => appDispatch({ type: 'splitseries', value: e.target.checked })} />\n        <label htmlFor=\"splitseries\">Split into series</label>\n      </div>\n    </div>\n  )\n}\nexport default SearchMode\n","import { createContext } from 'react'\n\nconst StateContext = createContext()\n\nexport default StateContext\n","import React, { useState, useEffect } from 'react'\n// import { useDebounce } from 'use-debounce'\nimport Paginators from './components/Paginators/Paginators'\nimport GlyphCard from './components/GlyphCard/GlyphCard'\nimport SearchInput from './components/SearchInput/SearchInput'\nimport SearchMode from './components/SearchMode/SearchMode'\nimport { unicodeData } from './unicode/UnicodeData'\nimport StateContext from './StateContext'\nimport DispatchContext from './DispatchContext'\nimport { useImmerReducer } from 'use-immer'\nimport AnimateHeight from 'react-animate-height'\n\nimport './App.css'\nconst Entities = require('html-entities').AllHtmlEntities\n\nconst initialResultsPerPage = 24\n\nconst useStateWithLocalStorage = localStorageKey => {\n  const [value, setValue] = useState(localStorage.getItem(localStorageKey) || true)\n  useEffect(() => localStorage.setItem(localStorageKey, value), [value])\n  return [value, setValue]\n}\nconst savedUI = JSON.parse(localStorage.getItem('uiStorage'))\n\nfunction App() {\n  const [currentPage, setCurrentPage] = useState(0)\n  const [resultsPerPage, setResultsPerPage] = useState(initialResultsPerPage)\n  // const [results, setResults] = useState([])\n  const [glyphsToggle, setGlyphsToggle] = useStateWithLocalStorage('glyphsToggle')\n  const [entitiesToggle, setEntitiesToggle] = useStateWithLocalStorage('entitiesToggle')\n\n  const originalState = {\n    query: '',\n    isSplitSeries: true,\n    results: []\n  }\n\n  const [uiStorage, setUiStorage] = useState(\n    JSON.parse(localStorage.getItem('uiStorage')) || {\n      glyphs: true,\n      htmlEntities: false\n    }\n  )\n\n  useEffect(() => {\n    const items = JSON.parse(localStorage.getItem('uiStorage'))\n    if (uiStorage) {\n      setUiStorage(uiStorage)\n    }\n  }, [])\n\n  useEffect(() => {\n    console.log('STORING?', uiStorage, JSON.stringify(uiStorage))\n    localStorage.setItem('uiStorage', JSON.stringify(uiStorage))\n  }, [uiStorage])\n\n  const [state, dispatch] = useImmerReducer(ourReducer, originalState)\n\n  function ourReducer(draft, action) {\n    // eslint-disable-next-line default-case\n    switch (action.type) {\n      case 'showsearchresults':\n        draft.results = action.results\n        draft.query = action.query\n        return\n      case 'splitseries':\n        draft.isSplitSeries = action.value\n        return\n      case 'defaultmodeupdate':\n        draft.defaultedsearch = action.value\n        return\n      case 'queryupdate':\n        draft.query = action.value\n        return\n    }\n  }\n  function joinWrap(arr, prefix, suffix) {\n    return prefix + arr.join(suffix + prefix) + suffix\n  }\n  function rangeHandler(results) {\n    const rangeStart = resultsPerPage * currentPage\n    const rangeEnd = rangeStart + resultsPerPage\n    return [...results.slice(rangeStart, rangeEnd)]\n  }\n  function entityEncode(str) {\n    return Entities.encodeNonUTF(str)\n  }\n  const hasQuery = state.query && state.query.length\n  return (\n    <StateContext.Provider value={state}>\n      <DispatchContext.Provider value={dispatch}>\n        <div className=\"App\">\n          {/* <pre>{JSON.stringify(state).replaceAll('{', '').replaceAll('}', '').replaceAll(',', ',\\n')}</pre> */}\n          <h1 className=\"App-header\">GlyphWorks</h1>\n          <SearchInput isSplitSeries={state.isSplitSeries} onInputChange={setCurrentPage} />\n          <SearchMode isSplitSeries={state.isSplitSeries} query={state.query} />\n          <button aria-expanded={uiStorage.glyphs} aria-controls=\"section-glyphs\" className={`section-title${hasQuery ? ' active' : ''}${hasQuery && uiStorage.glyphs ? ' expanded' : ''}`} onClick={() => setUiStorage({ ...uiStorage, glyphs: !uiStorage.glyphs })} disabled={hasQuery ? null : true}>\n            Glyphs\n          </button>\n          <AnimateHeight id=\"section-glyphs\" duration={500} height={uiStorage.glyphs ? 'auto' : 0}>\n            <ul className=\"glyphcardContainer\">{hasQuery ? rangeHandler(state.results).map((item, index) => <GlyphCard item={unicodeData[item]} key={index} />) : null}</ul>\n            {hasQuery && state.results.length > resultsPerPage ? <Paginators currentPage={currentPage} decrement={() => setCurrentPage(Math.max(0, currentPage - 1))} increment={() => setCurrentPage(Math.floor(Math.min(state.results.length / resultsPerPage, currentPage + 1)))} numPages={Math.floor((state.results.length - 1) / resultsPerPage)} /> : false}\n          </AnimateHeight>\n          <button aria-expanded={uiStorage.htmlEntities} aria-controls=\"section-glyphs\" className={`section-title${hasQuery && uiStorage.htmlEntities ? ' expanded' : ''}`} onClick={() => setUiStorage({ ...uiStorage, htmlEntities: !uiStorage.htmlEntities })} disabled={hasQuery ? null : true}>\n            HTML Entities\n          </button>\n          <AnimateHeight id=\"section-entities\" duration={500} height={uiStorage.htmlEntities ? 'auto' : 0}>\n            {hasQuery ? (\n              <>\n                <label for=\"entity-url\">URL addresses/mailto: links</label>\n                <textarea id=\"entity-url\" value={encodeURI(state.query)}></textarea>\n                <label for=\"entity-all\">URL addresses/mailto: links</label>\n                <textarea id=\"entity-all\" value={Entities.encode(state.query)}></textarea>\n                {/* <textarea value={Entities.encodeNonUTF(state.query)}></textarea> */}\n                {/* <textarea value={Entities.encodeNonASCII(state.query)}></textarea> */}\n              </>\n            ) : null}\n          </AnimateHeight>\n        </div>\n      </DispatchContext.Provider>\n    </StateContext.Provider>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Paginators\":\"paginators_Paginators__2m4Mo\",\"increment\":\"paginators_increment__UZIqQ\",\"decrement\":\"paginators_decrement__JEY1E\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"icon_clipboard\":\"searchmode_icon_clipboard__YICcz\",\"SearchMode_Container\":\"searchmode_SearchMode_Container__190RC\",\"SearchMode_ButtonSet\":\"searchmode_SearchMode_ButtonSet__2UxlL\",\"SearchMode_Button\":\"searchmode_SearchMode_Button__3ebmp\",\"SearchMode_Checkbox\":\"searchmode_SearchMode_Checkbox__38vU8\"};"],"sourceRoot":""}